const { createCanvas } = require('canvas');
const fs = require('fs');
const path = require('path');

class ImageGenerator {
  constructor() {
    this.cacheDir = path.join(__dirname, '../cache');
    this.ensureCacheDir();
  }

  ensureCacheDir() {
    if (!fs.existsSync(this.cacheDir)) {
      fs.mkdirSync(this.cacheDir, { recursive: true });
    }
  }

  async generateSummaryImage(totalCountries, topCountries, lastRefreshed) {
    const width = 800;
    const height = 600;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // Background
    ctx.fillStyle = '#f8f9fa';
    ctx.fillRect(0, 0, width, height);

    // Header
    ctx.fillStyle = '#2c3e50';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Countries Summary', width / 2, 60);

    // Total Countries
    ctx.fillStyle = '#34495e';
    ctx.font = '24px Arial';
    ctx.fillText(`Total Countries: ${totalCountries}`, width / 2, 120);

    // Last Refreshed
    ctx.fillStyle = '#7f8c8d';
    ctx.font = '18px Arial';
    ctx.fillText(`Last Refreshed: ${new Date(lastRefreshed).toLocaleString()}`, width / 2, 160);

    // Top Countries Header
    ctx.fillStyle = '#2c3e50';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'left';
    ctx.fillText('Top 5 Countries by Estimated GDP:', 50, 220);

    // Top Countries List
    ctx.fillStyle = '#34495e';
    ctx.font = '18px Arial';
    
    topCountries.forEach((country, index) => {
      const yPos = 270 + (index * 60);
      
      // Country name and GDP
      ctx.fillText(`${index + 1}. ${country.name}`, 70, yPos);
      ctx.fillText(`GDP: $${this.formatNumber(country.estimated_gdp)}`, 70, yPos + 25);
    });

    // Footer
    ctx.fillStyle = '#95a5a6';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Country Currency API', width / 2, height - 30);

    // Save image
    const buffer = canvas.toBuffer('image/png');
    const imagePath = path.join(this.cacheDir, 'summary.png');
    fs.writeFileSync(imagePath, buffer);

    return imagePath;
  }

  formatNumber(num) {
    if (!num) return '0';
    return new Intl.NumberFormat('en-US', {
      maximumFractionDigits: 2,
      notation: 'compact'
    }).format(num);
  }

  getImagePath() {
    return path.join(this.cacheDir, 'summary.png');
  }

  imageExists() {
    return fs.existsSync(this.getImagePath());
  }
}

module.exports = new ImageGenerator();